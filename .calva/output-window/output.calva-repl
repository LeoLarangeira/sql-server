; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "undefined" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Aborting jack-in. No project type selected.
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /home/leonardo/Desktop/sql-server ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless ; popd
; Interrupting Jack-in process.
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /home/leonardo/Desktop/sql-server ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless ; popd
; Using host:port 127.0.0.1:33685 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉sql-server.core꞉>  ; Use `alt+enter` to evaluate
clj꞉sql-server.core꞉> 
; Jack-in done.
clj꞉sql-server.core꞉> 
nil
clj꞉sql-server.dto.convert꞉> 
#'sql-server.dto.convert/user-dto
clj꞉sql-server.dto.convert꞉> 
#'sql-server.dto.convert/user-test
clj꞉sql-server.dto.convert꞉> 
[:user/name nil]
nil
clj꞉sql-server.dto.convert꞉> 
#:user{:name nil, :email nil, :address nil}
clj꞉sql-server.dto.convert꞉> 
#'sql-server.dto.convert/user-test
clj꞉sql-server.dto.convert꞉> 
{:name "Leo", :email "teste@mail.com", :address "teste rua"}
clj꞉sql-server.dto.convert꞉> 
#'sql-server.dto.convert/dto->user
clj꞉sql-server.dto.convert꞉> 
; Syntax error compiling at (src/sql_server/dto/convert.clj:14:17).
; Unable to resolve symbol: user->dto in this context
clj꞉sql-server.dto.convert꞉> 
; Execution error (ArityException) at sql-server.dto.convert/eval8042 (form-init14980611052671236905.clj:13).
; Wrong number of args (0) passed to: clojure.lang.PersistentArrayMap
clj꞉sql-server.dto.convert꞉> 
#'sql-server.dto.convert/user->dto
clj꞉sql-server.dto.convert꞉> 
{:name "Leo", :email "teste@mail.com", :address "teste rua"}
clj꞉sql-server.dto.convert꞉> 
[:user/name nil]
nil
clj꞉sql-server.dto.convert꞉> 
#function[clojure.core/map/fn--5931]
clj꞉sql-server.dto.convert꞉> 
